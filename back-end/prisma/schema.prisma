// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================
// MODELO DE USUÁRIOS
// ===================================

model Usuario {
  id        String   @id @default(uuid())
  nome      String
  email     String   @unique
  senha     String
  categoria String // 'administracao_tecnica', 'gerencia_nutricao', 'comissao_recebimento'
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("usuarios")
}

// ===================================
// MODELOS BASE
// ===================================

model UnidadeMedida {
  id    String @id @default(uuid())
  nome  String
  sigla String @unique

  // Relações
  itensContrato ItemContrato[]
}

model Fornecedor {
  id        String   @id @default(uuid())
  nome      String
  cnpj      String   @unique
  telefone  String?
  email     String   @unique
  endereco  String?
  ativo     Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")

  // Relações
  contratos Contrato[]
}

model UnidadeEducacional {
  id       String  @id @default(uuid())
  nome     String
  codigo   String  @unique
  endereco String?
  telefone String?
  email    String  @unique
  ativo    Boolean @default(true)

  // Campos para contagem de estudantes por tipo
  estudantesBercario  Int @default(0) @map("estudantes_bercario")
  estudantesMaternal  Int @default(0) @map("estudantes_maternal")
  estudantesPreEscola Int @default(0) @map("estudantes_preescola")
  estudantesRegular   Int @default(0) @map("estudantes_regular")
  estudantesIntegral  Int @default(0) @map("estudantes_integral")
  estudantesEja       Int @default(0) @map("estudantes_eja")

  // Relações
  pedidos                  ItemPedido[]
  recibos                  Recibo[]
  estoques                 Estoque[]
  movimentacoesRemanejadas MovimentacaoEstoque[] @relation("MovimentacaoRemanejamento")
}

// ===================================
// MODELOS PRINCIPAIS
// ===================================

model Contrato {
  id         String   @id @default(uuid())
  numero     String   @unique
  dataInicio DateTime @map("data_inicio")
  dataFim    DateTime @map("data_fim")
  valorTotal Float    @map("valor_total")
  status     String // Ex: 'ativo', 'inativo', 'concluido'
  createdAt  DateTime @default(now()) @map("created_at")

  // Relação com Fornecedor
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id])
  fornecedorId String     @map("fornecedor_id")

  // Relação com Itens do Contrato
  itens   ItemContrato[]
  // Relação com Pedidos
  pedidos Pedido[]
}

model ItemContrato {
  id            String @id @default(uuid())
  nome          String
  valorUnitario Float  @map("valor_unitario")

  // Quantidades separadas por tipo de estoque
  quantidadeOriginal Float @map("quantidade_original") // Mantido para compatibilidade
  saldoAtual         Float @map("saldo_atual") // Mantido para compatibilidade
  quantidadeCreche   Float @default(0) @map("quantidade_creche")
  quantidadeEscola   Float @default(0) @map("quantidade_escola")
  saldoCreche        Float @default(0) @map("saldo_creche")
  saldoEscola        Float @default(0) @map("saldo_escola")

  // Relação com Contrato
  contrato   Contrato @relation(fields: [contratoId], references: [id])
  contratoId String   @map("contrato_id")

  // Relação com Unidade de Medida
  unidadeMedida   UnidadeMedida @relation(fields: [unidadeMedidaId], references: [id])
  unidadeMedidaId String        @map("unidade_medida_id")

  // Relação com Itens de Pedido
  itensPedido ItemPedido[]
  // Relação com Estoque
  estoques    Estoque[]
  // Relação com Percápita
  percapitas  PercapitaItem[]
}

model Pedido {
  id                  String   @id @default(uuid())
  numero              String   @unique
  dataPedido          DateTime @map("data_pedido")
  dataEntregaPrevista DateTime @map("data_entrega_prevista")
  status              String // Ex: 'pendente', 'entregue', 'cancelado'
  valorTotal          Float    @map("valor_total")
  createdAt           DateTime @default(now()) @map("created_at")

  // Relação com Contrato
  contrato   Contrato @relation(fields: [contratoId], references: [id])
  contratoId String   @map("contrato_id")

  // Relações
  itens   ItemPedido[]
  recibos Recibo[] // Um pedido pode ter um recibo
}

model ItemPedido {
  id         String @id @default(uuid())
  quantidade Float

  // Relação com Pedido
  pedido   Pedido @relation(fields: [pedidoId], references: [id])
  pedidoId String @map("pedido_id")

  // Relação com Item do Contrato (para saber o que foi pedido)
  itemContrato   ItemContrato @relation(fields: [itemContratoId], references: [id])
  itemContratoId String       @map("item_contrato_id")

  // Relação com Unidade Educacional (para onde vai o item)
  unidadeEducacional   UnidadeEducacional @relation(fields: [unidadeEducacionalId], references: [id])
  unidadeEducacionalId String             @map("unidade_educacional_id")

  // Relação com Itens de Recibo
  itemRecibo ItemRecibo?
}

model Recibo {
  id                     String   @id @default(uuid())
  numero                 String   @unique
  dataEntrega            DateTime @map("data_entrega")
  responsavelEntrega     String   @map("responsavel_entrega")
  responsavelRecebimento String   @map("responsavel_recebimento")
  status                 String // Ex: 'confirmado', 'pendente', 'rejeitado'
  qrcode                 String?
  observacoes            String?
  createdAt              DateTime @default(now()) @map("created_at")

  // Relação com Pedido (um recibo pertence a um pedido)
  pedido   Pedido @relation(fields: [pedidoId], references: [id])
  pedidoId String @map("pedido_id")

  // Relação com Unidade Educacional (quem recebeu)
  unidadeEducacional   UnidadeEducacional @relation(fields: [unidadeEducacionalId], references: [id])
  unidadeEducacionalId String             @map("unidade_educacional_id")

  // Relação com Itens do Recibo
  itens ItemRecibo[]

  // Relação com Movimentações de Estoque
  movimentacoesEstoque MovimentacaoEstoque[]

  //relação de imagens base64
  assinaturaDigital   AssinaturaDigital? @relation(fields: [assinaturaDigitalId], references: [id])
  assinaturaDigitalId String?            @unique

  fotoReciboAssinado   FotoReciboAssinado?     @relation(fields: [fotoReciboAssinadoId], references: [id])
  fotoReciboAssinadoId String?                 @unique
  historicoAjustes     HistoricoAjusteRecibo[]

  @@unique([pedidoId, unidadeEducacionalId])
}

model HistoricoAjusteRecibo {
  id          String   @id @default(uuid())
  reciboId    String   @map("recibo_id")
  recibo      Recibo   @relation(fields: [reciboId], references: [id])
  dataAjuste  DateTime @default(now()) @map("data_ajuste")
  responsavel String
  observacoes String?
  mudancas    Json // Armazena um JSON com as mudanças feitas nos itens
}

// ===================================
// MODELOS PARA SISTEMA EDUCACIONAL
// ===================================

model TipoEstudante {
  id        String @id @default(uuid())
  nome      String
  sigla     String @unique
  categoria String // 'creche' ou 'escola'
  ordem     Int

  // Relações
  percapitas PercapitaItem[]
}

model PercapitaItem {
  id                   String   @id @default(uuid())
  gramagemPorEstudante Float    @default(0) @map("gramagem_por_estudante")
  frequenciaMensal     Int      @default(5) @map("frequencia_mensal")
  ativo                Boolean  @default(true)
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relação com Item do Contrato
  itemContrato   ItemContrato @relation(fields: [itemContratoId], references: [id])
  itemContratoId String       @map("item_contrato_id")

  // Relação com Tipo de Estudante
  tipoEstudante   TipoEstudante @relation(fields: [tipoEstudanteId], references: [id])
  tipoEstudanteId String        @map("tipo_estudante_id")

  @@unique([itemContratoId, tipoEstudanteId])
}

model AssinaturaDigital {
  id           String   @id @default(uuid())
  imagemBase64 String
  criadoEm     DateTime @default(now())
  recibo       Recibo?  @relation
}

model FotoReciboAssinado {
  id       String   @id @default(uuid())
  url      String
  criadoEm DateTime @default(now())
  recibo   Recibo?  @relation
}

model ItemRecibo {
  id                   String  @id @default(uuid())
  quantidadeSolicitada Float   @map("quantidade_solicitada")
  quantidadeRecebida   Float   @map("quantidade_recebida")
  conforme             Boolean
  observacoes          String?

  // Relação com Recibo
  recibo   Recibo @relation(fields: [reciboId], references: [id])
  reciboId String @map("recibo_id")

  // Relação com Item do Pedido (para saber o que foi recebido)
  itemPedido   ItemPedido @relation(fields: [itemPedidoId], references: [id])
  itemPedidoId String     @unique @map("item_pedido_id")
}

// ===================================
// MODELOS DE ESTOQUE
// ===================================

model Estoque {
  id                String   @id @default(uuid())
  quantidadeAtual   Float    @default(0) @map("quantidade_atual")
  quantidadeMinima  Float    @default(0) @map("quantidade_minima")
  ultimaAtualizacao DateTime @default(now()) @map("ultima_atualizacao")
  tipoEstoque       String   @default("escola") @map("tipo_estoque") // 'creche' ou 'escola'

  // Relação com Unidade Educacional
  unidadeEducacional   UnidadeEducacional @relation(fields: [unidadeEducacionalId], references: [id])
  unidadeEducacionalId String             @map("unidade_educacional_id")

  // Relação com Item do Contrato
  itemContrato   ItemContrato @relation(fields: [itemContratoId], references: [id])
  itemContratoId String       @map("item_contrato_id")

  // Relação com Movimentações
  movimentacoes MovimentacaoEstoque[]

  @@unique([unidadeEducacionalId, itemContratoId, tipoEstoque])
}

model MovimentacaoEstoque {
  id                 String   @id @default(uuid())
  tipo               String // 'entrada', 'saida', 'ajuste', 'remanejamento', 'descarte'
  quantidade         Float
  quantidadeAnterior Float    @map("quantidade_anterior")
  quantidadeNova     Float    @map("quantidade_nova")
  motivo             String
  responsavel        String
  dataMovimentacao   DateTime @default(now()) @map("data_movimentacao")

  // Relação com Estoque
  estoque   Estoque @relation(fields: [estoqueId], references: [id])
  estoqueId String  @map("estoque_id")

  // Relação opcional com Recibo (para movimentações automáticas)
  recibo   Recibo? @relation(fields: [reciboId], references: [id])
  reciboId String? @map("recibo_id")

  // NOVO: Relação para Remanejamento
  unidadeDestinoId String?             @map("unidade_destino_id")
  unidadeDestino   UnidadeEducacional? @relation("MovimentacaoRemanejamento", fields: [unidadeDestinoId], references: [id])

  // NOVO: Relação para Descarte com foto
  fotoDescarte   FotoDescarte? @relation(fields: [fotoDescarteId], references: [id])
  fotoDescarteId String?       @unique @map("foto_descarte_id")
}

model FotoDescarte {
  id          String   @id @default(uuid())
  url         String   @db.Text
  motivo      String
  responsavel String
  criadoEm    DateTime @default(now())

  movimentacao MovimentacaoEstoque?
}
